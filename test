package test;

import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * This is Randomizer and Primer Based application to generate random numbers and detect if those are PRIME numbers.
 * Created by mhaske padmajeet on 10/20/2016.
 */
public class RandomPrime {

    public static void main(String[] args) {
    
        //Basic Java based LinkedBlocking queues for Communication between Randomizer and Primers
        final BlockingQueue<PrimeBean> priorityBlockingQueue = new LinkedBlockingQueue<PrimeBean>();
        final BlockingQueue<PrimeBean> resultantBlockingQueue = new LinkedBlockingQueue<PrimeBean>();

        //Randomizer to produce random Numbers
        Randomizer randomizer = new Randomizer(
                priorityBlockingQueue, resultantBlockingQueue);
        new Thread(randomizer, "Randomizer").start();
    
        //Primers to detect if produced number is Prime or not.
        Primer primer1 = new Primer(
                priorityBlockingQueue, resultantBlockingQueue);
        new Thread(primer1, "Primer One").start();

        Primer primer2 = new Primer(
                priorityBlockingQueue, resultantBlockingQueue);
        new Thread(primer2, "Primer Two").start();
        
    }
}

/* Randomizer class to enerate Ranoms numbers */

class Randomizer implements Runnable {

    protected BlockingQueue<PrimeBean> blockingQueue;
    protected BlockingQueue<PrimeBean> resultQueue;
    final Random random = new Random();

    public Randomizer(BlockingQueue<PrimeBean> queue, BlockingQueue<PrimeBean> resultQueue) {
        this.blockingQueue = queue;
        this.resultQueue = resultQueue;
    }

    @Override
    public void run() {
        while (true) {
            try {
                //Random Numbers are generate between0-100 and are added to blocking queue.
                PrimeBean primeBean = new PrimeBean((int)(Math.random()*100));
                System.out.println("Put: " + primeBean);
              
                blockingQueue.put(primeBean);

                //Thread sleeps until result is generated.
                Thread.sleep(100);

                // Result would be picked from resultQueue and output will be added to Console 
                PrimeBean processedPrime = resultQueue.take();

                if(processedPrime.isProcessed()){
                    System.out.println( primeBean.getPrime() + " is " + primeBean.getMessage() + " number");
                } else {
                    //In worst case if object is not processed,it would be added back to queue; 
                    //this should not happen current case, 
                    //but if same queue is used as result and blocking queue this can happen.
                    
                    blockingQueue.put(primeBean);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

}

/* Primer class to verify prime numbers */

class Primer implements Runnable {

    protected BlockingQueue<PrimeBean> blockingQueue;
    protected BlockingQueue<PrimeBean> resultQueue;

    public Primer(BlockingQueue<PrimeBean> queue, BlockingQueue<PrimeBean> resultQueue) {

        this.blockingQueue = queue;
        this.resultQueue = resultQueue;
    }

    @Override
    public void run() {
        while (true) {
            try {
                //Primer would read object from queue and verified its PRIMEness
                PrimeBean prime = blockingQueue.take();

                System.out.println(Thread.currentThread().getName()
                        + " take(): " + prime);

                //If object is processed then add message and put object to result queue
                if(!prime.isProcessed()){
                    if(isPrime(prime.getPrime())){
                        prime.setProcessed(true);
                        prime.setMessage("a PRIME");
                    } else {
                        prime.setProcessed(true);
                        prime.setMessage("not a PRIME");
                    }
                    resultQueue.put(prime);
                } else {
                    //If Object is already processed put it to resultQueue
                    resultQueue.put(prime);
                }

                Thread.sleep(200);

            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    //checks whether an int is prime or not.
    boolean isPrime(int n) {
        //check if n is a multiple of 2
        if (n%2==0) return false;
        //if not, then just check the odds
        for(int i=3;i*i<=n;i+=2) {
            if(n%i==0)
                return false;
        }
        return true;
    }



}

/* PrimeBean to carry Integer in concern and processing status and resultant message. */

class PrimeBean {

    private Integer prime;
    private String message;
    private boolean isProcessed;

    public PrimeBean(Integer prime) {
        this.prime = prime;
        this.message = "";
        this.isProcessed = false;
    }

    public Integer getPrime() {
        return prime;
    }

    public void setPrime(Integer prime) {
        this.prime = prime;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public boolean isProcessed() {
        return isProcessed;
    }

    public void setProcessed(boolean processed) {
        isProcessed = processed;
    }

    @Override
    public String toString() {
        return "PrimeBean{" +
                "prime=" + prime +
                ", message='" + message + '\'' +
                ", isProcessed=" + isProcessed +
                '}';
    }
}
